// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: protos/src/resources.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "services";

export enum ResourceTypes {
  UNSPECIFIED = 0,
  INTEGRATION = 1,
  UNRECOGNIZED = -1,
}

export interface CreateResourceRequest {
  id: string;
  organizationId: string;
  type: ResourceTypes;
  attributes: { [key: string]: string };
}

export interface CreateResourceRequest_AttributesEntry {
  key: string;
  value: string;
}

export interface CreateResourceResponse {
  id: string;
  organizationId: string;
  attributes: { [key: string]: string };
}

export interface CreateResourceResponse_AttributesEntry {
  key: string;
  value: string;
}

export interface DeleteResourceRequest {
  id: string;
}

export interface DeleteResourceResponse {
}

export interface UpdateResourceRequest {
  id: string;
  organizationId?: string | undefined;
  type?: ResourceTypes | undefined;
  attributes: { [key: string]: string };
}

export interface UpdateResourceRequest_AttributesEntry {
  key: string;
  value: string;
}

export interface UpdateResourceResponse {
  id: string;
  organizationId: string;
  attributes: { [key: string]: string };
}

export interface UpdateResourceResponse_AttributesEntry {
  key: string;
  value: string;
}

export const SERVICES_PACKAGE_NAME = "services";

export interface ResourcesServiceClient {
  create(request: CreateResourceRequest): Observable<CreateResourceResponse>;

  update(request: UpdateResourceRequest): Observable<UpdateResourceResponse>;

  delete(request: DeleteResourceRequest): Observable<DeleteResourceResponse>;
}

export interface ResourcesServiceController {
  create(
    request: CreateResourceRequest,
  ): Promise<CreateResourceResponse> | Observable<CreateResourceResponse> | CreateResourceResponse;

  update(
    request: UpdateResourceRequest,
  ): Promise<UpdateResourceResponse> | Observable<UpdateResourceResponse> | UpdateResourceResponse;

  delete(
    request: DeleteResourceRequest,
  ): Promise<DeleteResourceResponse> | Observable<DeleteResourceResponse> | DeleteResourceResponse;
}

export function ResourcesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ResourcesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ResourcesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RESOURCES_SERVICE_NAME = "ResourcesService";
